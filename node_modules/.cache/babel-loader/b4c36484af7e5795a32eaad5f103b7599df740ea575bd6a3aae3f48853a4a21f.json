{"ast":null,"code":"// Mock Data Service - Replaces backend API calls\nimport { v4 as uuidv4 } from 'uuid';\n\n// Mock portfolio data\nlet mockPortfolioData = [{\n  id: uuidv4(),\n  symbol: 'AAPL',\n  name: 'Apple Inc.',\n  type: 'stock',\n  quantity: 50,\n  purchase_price: 150.00,\n  current_price: 175.50,\n  purchase_date: '2023-01-15',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString()\n}, {\n  id: uuidv4(),\n  symbol: 'GOOGL',\n  name: 'Alphabet Inc.',\n  type: 'stock',\n  quantity: 25,\n  purchase_price: 2800.00,\n  current_price: 2950.75,\n  purchase_date: '2023-02-20',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString()\n}, {\n  id: uuidv4(),\n  symbol: 'BTC',\n  name: 'Bitcoin',\n  type: 'crypto',\n  quantity: 2.5,\n  purchase_price: 45000.00,\n  current_price: 52000.00,\n  purchase_date: '2023-03-10',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString()\n}, {\n  id: uuidv4(),\n  symbol: 'US10Y',\n  name: 'US Treasury 10 Year Bond',\n  type: 'bond',\n  quantity: 100,\n  purchase_price: 98.50,\n  current_price: 97.25,\n  purchase_date: '2023-04-05',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString()\n}, {\n  id: uuidv4(),\n  symbol: 'SPY',\n  name: 'SPDR S&P 500 ETF',\n  type: 'etf',\n  quantity: 75,\n  purchase_price: 420.00,\n  current_price: 445.30,\n  purchase_date: '2023-05-12',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString()\n}];\n\n// Mock API functions\nexport const mockApi = {\n  // Get all portfolio items\n  getPortfolio: () => {\n    return Promise.resolve(mockPortfolioData);\n  },\n  // Add new portfolio item\n  addPortfolioItem: item => {\n    const newItem = {\n      ...item,\n      id: uuidv4(),\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    mockPortfolioData.push(newItem);\n    return Promise.resolve(newItem);\n  },\n  // Update portfolio item\n  updatePortfolioItem: (id, updates) => {\n    const index = mockPortfolioData.findIndex(item => item.id === id);\n    if (index !== -1) {\n      mockPortfolioData[index] = {\n        ...mockPortfolioData[index],\n        ...updates,\n        updated_at: new Date().toISOString()\n      };\n      return Promise.resolve(mockPortfolioData[index]);\n    }\n    return Promise.reject(new Error('Item not found'));\n  },\n  // Delete portfolio item\n  deletePortfolioItem: id => {\n    const index = mockPortfolioData.findIndex(item => item.id === id);\n    if (index !== -1) {\n      const deletedItem = mockPortfolioData.splice(index, 1)[0];\n      return Promise.resolve(deletedItem);\n    }\n    return Promise.reject(new Error('Item not found'));\n  },\n  // Get portfolio summary statistics\n  getPortfolioSummary: () => {\n    const totalValue = mockPortfolioData.reduce((sum, item) => {\n      return sum + item.quantity * item.current_price;\n    }, 0);\n    const totalCost = mockPortfolioData.reduce((sum, item) => {\n      return sum + item.quantity * item.purchase_price;\n    }, 0);\n    const totalGainLoss = totalValue - totalCost;\n    const totalGainLossPercentage = totalCost > 0 ? totalGainLoss / totalCost * 100 : 0;\n\n    // Asset breakdown\n    const assetBreakdown = mockPortfolioData.reduce((breakdown, item) => {\n      const value = item.quantity * item.current_price;\n      const cost = item.quantity * item.purchase_price;\n      const gainLoss = value - cost;\n      if (breakdown[item.type]) {\n        breakdown[item.type].current_value += value;\n        breakdown[item.type].cost += cost;\n        breakdown[item.type].gain_loss += gainLoss;\n        breakdown[item.type].count += 1;\n      } else {\n        breakdown[item.type] = {\n          type: item.type,\n          current_value: value,\n          cost: cost,\n          gain_loss: gainLoss,\n          count: 1\n        };\n      }\n      return breakdown;\n    }, {});\n\n    // Convert to array format expected by Dashboard\n    const byTypeArray = Object.values(assetBreakdown);\n    return Promise.resolve({\n      total_value: totalValue,\n      total_cost: totalCost,\n      total_gain_loss: totalGainLoss,\n      total_gain_loss_percentage: totalGainLossPercentage,\n      total_items: mockPortfolioData.length,\n      asset_breakdown: assetBreakdown,\n      by_type: byTypeArray\n    });\n  },\n  // Get performance data for charts\n  getPerformanceData: () => {\n    // Generate mock performance data\n    const performanceData = [];\n    const startDate = new Date('2023-01-01');\n    const endDate = new Date();\n    const daysDiff = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));\n    for (let i = 0; i <= daysDiff; i += 7) {\n      // Weekly data points\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n\n      // Calculate portfolio value for this date (mock calculation)\n      const baseValue = 500000; // Starting portfolio value\n      const growth = i / daysDiff * 0.15; // 15% growth over time\n      const volatility = Math.sin(i / 10) * 0.05; // Some volatility\n      const value = baseValue * (1 + growth + volatility);\n      performanceData.push({\n        date: date.toISOString().split('T')[0],\n        value: Math.round(value * 100) / 100\n      });\n    }\n    return Promise.resolve(performanceData);\n  }\n};\n\n// Export individual functions for easier importing\nexport const {\n  getPortfolio,\n  addPortfolioItem,\n  updatePortfolioItem,\n  deletePortfolioItem,\n  getPortfolioSummary,\n  getPerformanceData\n} = mockApi;","map":{"version":3,"names":["v4","uuidv4","mockPortfolioData","id","symbol","name","type","quantity","purchase_price","current_price","purchase_date","created_at","Date","toISOString","updated_at","mockApi","getPortfolio","Promise","resolve","addPortfolioItem","item","newItem","push","updatePortfolioItem","updates","index","findIndex","reject","Error","deletePortfolioItem","deletedItem","splice","getPortfolioSummary","totalValue","reduce","sum","totalCost","totalGainLoss","totalGainLossPercentage","assetBreakdown","breakdown","value","cost","gainLoss","current_value","gain_loss","count","byTypeArray","Object","values","total_value","total_cost","total_gain_loss","total_gain_loss_percentage","total_items","length","asset_breakdown","by_type","getPerformanceData","performanceData","startDate","endDate","daysDiff","Math","ceil","i","date","setDate","getDate","baseValue","growth","volatility","sin","split","round"],"sources":["D:/Rinitha/interface/client/src/services/mockData.js"],"sourcesContent":["// Mock Data Service - Replaces backend API calls\nimport { v4 as uuidv4 } from 'uuid';\n\n// Mock portfolio data\nlet mockPortfolioData = [\n  {\n    id: uuidv4(),\n    symbol: 'AAPL',\n    name: 'Apple Inc.',\n    type: 'stock',\n    quantity: 50,\n    purchase_price: 150.00,\n    current_price: 175.50,\n    purchase_date: '2023-01-15',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  },\n  {\n    id: uuidv4(),\n    symbol: 'GOOGL',\n    name: 'Alphabet Inc.',\n    type: 'stock',\n    quantity: 25,\n    purchase_price: 2800.00,\n    current_price: 2950.75,\n    purchase_date: '2023-02-20',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  },\n  {\n    id: uuidv4(),\n    symbol: 'BTC',\n    name: 'Bitcoin',\n    type: 'crypto',\n    quantity: 2.5,\n    purchase_price: 45000.00,\n    current_price: 52000.00,\n    purchase_date: '2023-03-10',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  },\n  {\n    id: uuidv4(),\n    symbol: 'US10Y',\n    name: 'US Treasury 10 Year Bond',\n    type: 'bond',\n    quantity: 100,\n    purchase_price: 98.50,\n    current_price: 97.25,\n    purchase_date: '2023-04-05',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  },\n  {\n    id: uuidv4(),\n    symbol: 'SPY',\n    name: 'SPDR S&P 500 ETF',\n    type: 'etf',\n    quantity: 75,\n    purchase_price: 420.00,\n    current_price: 445.30,\n    purchase_date: '2023-05-12',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  }\n];\n\n// Mock API functions\nexport const mockApi = {\n  // Get all portfolio items\n  getPortfolio: () => {\n    return Promise.resolve(mockPortfolioData);\n  },\n\n  // Add new portfolio item\n  addPortfolioItem: (item) => {\n    const newItem = {\n      ...item,\n      id: uuidv4(),\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    mockPortfolioData.push(newItem);\n    return Promise.resolve(newItem);\n  },\n\n  // Update portfolio item\n  updatePortfolioItem: (id, updates) => {\n    const index = mockPortfolioData.findIndex(item => item.id === id);\n    if (index !== -1) {\n      mockPortfolioData[index] = {\n        ...mockPortfolioData[index],\n        ...updates,\n        updated_at: new Date().toISOString()\n      };\n      return Promise.resolve(mockPortfolioData[index]);\n    }\n    return Promise.reject(new Error('Item not found'));\n  },\n\n  // Delete portfolio item\n  deletePortfolioItem: (id) => {\n    const index = mockPortfolioData.findIndex(item => item.id === id);\n    if (index !== -1) {\n      const deletedItem = mockPortfolioData.splice(index, 1)[0];\n      return Promise.resolve(deletedItem);\n    }\n    return Promise.reject(new Error('Item not found'));\n  },\n\n  // Get portfolio summary statistics\n  getPortfolioSummary: () => {\n    const totalValue = mockPortfolioData.reduce((sum, item) => {\n      return sum + (item.quantity * item.current_price);\n    }, 0);\n\n    const totalCost = mockPortfolioData.reduce((sum, item) => {\n      return sum + (item.quantity * item.purchase_price);\n    }, 0);\n\n    const totalGainLoss = totalValue - totalCost;\n    const totalGainLossPercentage = totalCost > 0 ? (totalGainLoss / totalCost) * 100 : 0;\n\n    // Asset breakdown\n    const assetBreakdown = mockPortfolioData.reduce((breakdown, item) => {\n      const value = item.quantity * item.current_price;\n      const cost = item.quantity * item.purchase_price;\n      const gainLoss = value - cost;\n      \n      if (breakdown[item.type]) {\n        breakdown[item.type].current_value += value;\n        breakdown[item.type].cost += cost;\n        breakdown[item.type].gain_loss += gainLoss;\n        breakdown[item.type].count += 1;\n      } else {\n        breakdown[item.type] = {\n          type: item.type,\n          current_value: value,\n          cost: cost,\n          gain_loss: gainLoss,\n          count: 1\n        };\n      }\n      return breakdown;\n    }, {});\n\n    // Convert to array format expected by Dashboard\n    const byTypeArray = Object.values(assetBreakdown);\n\n    return Promise.resolve({\n      total_value: totalValue,\n      total_cost: totalCost,\n      total_gain_loss: totalGainLoss,\n      total_gain_loss_percentage: totalGainLossPercentage,\n      total_items: mockPortfolioData.length,\n      asset_breakdown: assetBreakdown,\n      by_type: byTypeArray\n    });\n  },\n\n  // Get performance data for charts\n  getPerformanceData: () => {\n    // Generate mock performance data\n    const performanceData = [];\n    const startDate = new Date('2023-01-01');\n    const endDate = new Date();\n    const daysDiff = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));\n\n    for (let i = 0; i <= daysDiff; i += 7) { // Weekly data points\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n      \n      // Calculate portfolio value for this date (mock calculation)\n      const baseValue = 500000; // Starting portfolio value\n      const growth = (i / daysDiff) * 0.15; // 15% growth over time\n      const volatility = (Math.sin(i / 10) * 0.05); // Some volatility\n      const value = baseValue * (1 + growth + volatility);\n\n      performanceData.push({\n        date: date.toISOString().split('T')[0],\n        value: Math.round(value * 100) / 100\n      });\n    }\n\n    return Promise.resolve(performanceData);\n  }\n};\n\n// Export individual functions for easier importing\nexport const {\n  getPortfolio,\n  addPortfolioItem,\n  updatePortfolioItem,\n  deletePortfolioItem,\n  getPortfolioSummary,\n  getPerformanceData\n} = mockApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}